%%%%%%%%%%%%%%%%%%
%% Some Headers

Title: Web Services REST-Style: Universal Identifiers, Formats & Protocols


%%%%%%%%%%%%%%%%%%%%%
%% Some Extra CSS 

%css
  
table { width: 100%; }
th    { text-align: left; }

table#restspeak th:nth-child(1) { width: 20%; }
table#restspeak th:nth-child(2) { width: 5%; }
table#restspeak th:nth-child(3) { width: 20%; }
table#restspeak th:nth-child(4) { width: 5%; }
table#restspeak th:nth-child(5) { width: 50%; }

table#restspeak2 th:nth-child(1) { width: 20%; }
table#restspeak2 th:nth-child(2) { width: 80%; }

%end


%%%%%%%%%%%%%%
%% Let's go.


# Web Services REST-Style<br>Universal Identifiers, Formats & Protocols

Agenda

* What's REST?
* Universal Identifiers, Formats & Protocols 
* The Holy REST Trinity - Noun, Verbs, Types
* REST Design Principles 
* Architecture Astronaut REST Speak

{{ help }}


# Part 1 - What's REST?
{:.fullscreen}

{{ gradient silver white silver white }}


# What's REST?

Representational State Transfer (REST) - Meaningless Acronym? Wordplay?

> rest - n. - peace, ease, or refreshment resulting from the insight that the web works

No matter what vendors tell you - no need to "Light Up the Web" - relax - built on
an **open architecture using universal identifiers, formats & protocols and _evolving_ open standards** -
no need to reinvent the wheel and sign-up for single-vendor offerings.



# What's REST? (Cont'd)

{% left %}

### Narrow Definition

Alternative to BigCo Web Services:

* SOAP
* WS-\*¹ and
* RPC-Style Web Services (XML-RPC)

{% end %}


{% right %}

### Broad Definition

Best Practices for Designing Web Services for a Unified Human and Programable Web

{% end %}

¹: WS-\* =  Web Service Specs including WS-Transfer, WS-Addressing, WS-Eventing,
   WS-Security, WS-Federation, WS-Trust, and many more.




# Part 2 - Universal Identifiers, Formats & Protocols
{:.fullscreen} 

{{ gradient silver white silver white }}


# Universal Identifiers, Formats & Protocols<br>The Holy Trinity

{% left %}

{% step %}

### Identifiers

* URLs (Uniform Resource Locator)
* URIs (Uniform Resource Identifier)

{% end %}

{% step %}

### Formats

* HTML (HyperText Markup Language)
* XML (Extensible Markup Language)

{% end %}

{% end %}

{% right %}

{% step %}

### Protocols

* HTTP (HyperText Transfer Protocol)
* AtomPub (Atom Publishing Protocol)  

{% end %}

{% end %}


# The Holy REST Trinity - Noun, Verbs, Types


REST-Speak |   | Internet-Speak   |   | Plain Old English 
-----------|---|------------------|---|---------------------
Verbs      | ⇔ | Protocols        | ⇔ | Communication & Data Exchange Rules
Nouns      | ⇔ | Identifiers      | ⇔ | Names, Addresses
Types      | ⇔ | Formats          | ⇔ | Documents, Feeds, Photos, Videos, Music, etc.
{:#restspeak}



REST-Speak |   Examples
-----------|----------------
Verbs      | ⇒ HTTP GET, POST, PUT, DELETE
Nouns      | ⇒ `flickr.com/photos/tag/wien`, `deli.cio.us/tag/wien`, etc.
Types      | ⇒ HTML, RSS, PNG, etcetera
{:#restspeak2}



# Part 3 - Design Principles & Architecture
{:.fullscreen}

{{ gradient silver white silver white }}



# REST Design Principles 

* Idenifiers Matter  ⇒  Choose Great Names
* Open Formats Matter  ⇒  Avoid Vendor Lock-In
* Protocols Matter  ⇒  Learn more about HTTP and Use Best Practices
  * Use HTTP GET for Read-Only/Side-Effect-Free Requests
  * Use HTTP Accept Headers for Format Selection
  * Use Full HTTP Method Vocabulary (GET, POST, PUT, DELETE)

<!-- break -->

* No Web without Linking and No Linking without Identifiers!
* (Stateless) Resource Representation  ⇒  Open Format + Identifier e.g. HTML + URI


# Architecture Astronaut REST Speak

* REST-y
* REST-ful

<!-- break -->

* Resource-Oriented Architecure (ROA)
* Web-Oriented Architecure (WOA)

<!-- break -->

* REST-RPC¹-Hybrid - Three Web Service Architectures:
  1. REST
  2. REST-RPC Hybrid
  3. RPC

<!-- break -->

¹: RPC = Remote Procedure Call


# The End - Thank You
{:.fullscreen}

{{ gradient silver white silver white }}


<!-- abbreviations -->

*[SOAP]: Simple Object Access Protocol
*[WS-*]: Web Service Specs
*[RPC]:  Remote Procedure Call
*[XML]:  Extensible Markup Language
*[HTTP]: HyperText Transfer Protocol
*[HTML]: HyperText Markup Language
*[RSS]:  Really Simple Syndication
*[PNG]:  Portable Network Graphics
*[URI]:  Uniform Resource Identifier

